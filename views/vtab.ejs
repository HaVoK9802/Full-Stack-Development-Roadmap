<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="stylesheet" href="vtab.css" />
    <title>Document</title>
  </head>
  <body>
    <div id="player" style="color: transparent"><%=URL%></div>
    <div id="idx" style="color: transparent"><%=i%></div>
    <button onclick="Exit();window.location.href='/user'">Exit</button>

    <script>
      // 2. This code loads the IFrame Player API code asynchronously.
      var tag = document.createElement("script");
      let p = document.getElementById("player");
      let idx = document.getElementById("idx");
      let url = p.textContent;
      let i = Number(idx.textContent);
      var videoid = getVideoIdFromLink("https://" + url);
      console.log(videoid);
      let vid = (tag.src = "https://www.youtube.com/iframe_api");
      var firstScriptTag = document.getElementsByTagName("script")[0];
      firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);
      function getVideoIdFromLink(link) {
        // Create a new URL object with the YouTube link
        var url = new URL(link);

        // Get the search parameters from the URL object
        var searchParams = new URLSearchParams(url.search);

        // Get the value of the "v" parameter, which contains the video ID
        var videoId = searchParams.get("v");

        return videoId;
      }
      // 3. This function creates an <iframe> (and YouTube player)
      //    after the API code downloads.
      var player;
      function onYouTubeIframeAPIReady() {
        player = new YT.Player("player", {
          height: "640vh",
          width: "1477vh",
          videoId: videoid,
          playerVars: {
            playsinline: 1,
          },
          events: {
            onReady: onPlayerReady,
            onStateChange: onPlayerStateChange,
          },
        });
      }
      let count = 1;
      setInterval(tabTime, 1000);
      var currentTime;
      var duration;
      async function tabTime() {
        currentTime = await player.getCurrentTime();
        let state = await player.getPlayerState();
        duration = await player.getDuration();
        console.log(currentTime, count, state, duration);
        if (state == 5) {
          count = 1;
        }
        if (
          state == -1 ||
          state == 2 ||
          state == 3 ||
          state == 0 ||
          state == 5
        ) {
          count += 0;
        } else {
          count += 1;
        }
      }
      let check;
      function Exit() {
        if (count >= Math.floor(duration)) {
          check = 1;
        } 
        // else {
        //   check = 0;
        // }
        console.log(check);
        fetch("/user", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ check: check, idx: i }),
        })
          .then(console.log("done"))
          .catch((e) => console.error(e));
      }

      // 4. The API will call this function when the video player is ready.
      function onPlayerReady(event) {
        event.target.playVideo();
        // setInterval(checkProgress, 1000);
      }

      var done = false;
      function onPlayerStateChange(event) {
        if (event.data == YT.PlayerState.PLAYING && !done) {
          setTimeout(stopVideo, 0);
          done = true;
        }
      }
      function stopVideo() {
        player.stopVideo();
      }
    </script>
  </body>
</html>
